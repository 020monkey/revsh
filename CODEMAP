
This document is intended as an overview of the structure of the revsh codebase.
Minor helper functions will be ommited from the descriptions.

################################################################################
# revsh
################################################################################

- revsh.c
	-- main()
		--- Perform basic initialization.
		--- Calls the appropriate conductor, either do_control() or do_target() as appropriate.

- control.c
	-- do_control()
		--- Acts as the conductor for control nodes.
		--- Calls init_io_controller() to setup the networking layer.
		--- Calls negotiate_protocol() to setup the messaging layer.
		--- Talks with the remote partner to syncronize the revsh environment.
		--- Calls broker().
		--- Performs cleanup and exits.

- target.c
	-- do_target()
		--- Acts as the conductor for target nodes.
		--- Calls init_io_target() to setup the networking layer.
		--- Calls negotiate_protocol() to set up the messaging layer.
		--- Talks with the remote partner to syncronize the revsh environment.
		--- Sets up a pty.
		--- fork()s a child which exec()s a shell.
		--- Calls broker().
		--- Performs cleanup and exits.

- broker.c
	-- Uses message_pull() and message_push() to read and write data.
	-- Reads data from either the local or remote file descriptor, then writes it down the other.

- message.c
	-- message_pull()
		--- Uses remote_read() to pull data from the socket, and fills out the appropriate message data structures.
	-- message_push()
		--- Reads from the appropriate message data structures, and uses remote_write() to push data down the socket.

- io.c
	-- Includes either the io_ssl.c or io_nossl.c code, as appropriate.
	-- remote_printf()
		--- Provide a printf() style interface that uses our messaging layer.
	-- print_error()
		--- Determine if we are control or target and print either locally or w/remote_printf().

- io_ssl.c / io_nossl.c
	-- remote_read_plaintext()
		--- read() from our socket, w/out SSL involvement.
	-- remote_write_plaintext()
		--- write() to our socket, w/out SSL involvement.
	-- remote_read_encrypted()
		--- read() from our socket, w/SSL involvement.
	-- remote_write_encrypted()
		--- write() to our socket, w/SSL involvement.
	-- init_io_controller()
		--- Setup the network layer for the control node.
	-- init_io_target()
		--- Setup the network layer for the target node.


Note: the remote_read_*() and remote_write_*() functions are called through function pointers 
	named remote_read() and remote_write().


